{"version":3,"sources":["algorithms.js","ThreeApp.js","App.js","index.js"],"names":["random_rotations_avro","nums","tau","tf","Math","PI","x1","x2","x3","R","mul","v","add","identity","v_aux","expandDims","H","sub","AxesFromRotation","props","T","THREE","rot_mat","set","pos","quat","scale","decompose","react_default","a","createElement","args","size","position","x","y","z","quaternion","w","BatchAxesFromRotations","rot_mats","res","i","push","key","slice","Fragment","WireSphere","depthTest","wireframe","transparent","color","opacity","MainGroup","ref","useRef","rotRef","useEffect","rot","useFrame","state","delta","current","rotation","onClick","dataSync","num_rots","MainCamera","defaultRadius","camera","useThree","fov","near","far","aspect","window","innerWidth","innerHeight","lookAt","theta","phi","vec","sin","cos","ang_to_xyz","MainCanvas","react_three_fiber_esm","attach","OrbitControls","enablePan","maxPolarAngle","minDistance","maxDistance","AVRO","SPIRAL","defaultMethod","defaultAvro","defaultSpiral","num_sphere_pts","num_xy_rots","AvroSettings","_useState","useState","_useState2","Object","slicedToArray","val","setVal","htmlFor","type","id","value","onChange","e","target","onSettingChange","parseInt","SpiralSettings","_useState3","_useState4","sphereVal","setSphereVal","_useState5","_useState6","xyVal","setXyVal","DetailedSettings","method","Selections","_useState7","_useState8","setMethod","style","backgroundColor","top","new_method","Reference","bottom","navigator","userAgent","mobile","href","App","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","inherits","createClass","settings","setState","normalize","pts","div","cross","b","_tf$split","_tf$split2","a1","a2","a3","_tf$split3","_tf$split4","b1","b2","b3","c1","c2","c3","epsilon","n","z_vecs","y_vecs","x_vecs","Rz","rads","Rxy","tile","reshape","matMul","grid_rotations_spiral","width","height","ThreeApp","bind","React","Component","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.224cc3b2.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs'\n\n/** Signature of Algorithms\n *Returns: nums of Matrix3\n **/\n\nfunction random_rotations_avro(nums) {\n    let tau = tf.scalar(2 * Math.PI);\n    let x1 = tf.randomUniform([nums], 0, 1);\n    let x2 = tf.randomUniform([nums], 0, 1);\n    let x3 = tf.randomUniform([nums], 0, 1);\n    let R = tf.stack(\n        [\n            tf.stack([tf.cos(tf.mul(tau, x1)), tf.sin(tf.mul(tau, x1)), tf.zeros([nums])], 1),\n            tf.stack([tf.sin(tf.mul(tau, x1).mul(-1)), tf.cos(tf.mul(tau, x1)), tf.zeros([nums])], 1),\n            tf.stack([tf.zeros([nums]), tf.zeros([nums]), tf.ones([nums])], 1),\n        ], 1);\n    let v = tf.stack(\n        [\n            tf.cos(x2.mul(tau)).mul(tf.sqrt(x3)),\n            tf.sin(x2.mul(tau)).mul(tf.sqrt(x3)),\n            tf.sqrt(x3.mul(-1).add(1)),\n        ], 1)\n    let identity = tf.eye(3, 3, [nums]);\n    let v_aux = v.expandDims(2).mul(2).mul(v.expandDims(1));\n    let H = identity.sub(v_aux);\n    let rot_mats = tf.matMul(H, R).mul(-1);\n    return rot_mats;\n}\n\nfunction grid_rotations_spiral(num_sphere_pts, num_xy_rots) {\n    function normalize(pts) {\n        return pts.div(tf.norm(pts, 2, 1, true));\n    }\n    function cross(a, b) {\n        let [a1, a2, a3] = tf.split(a, 3, 1);\n        let [b1, b2, b3] = tf.split(b, 3, 1);\n        let c1 = a2.mul(b3).sub(a3.mul(b2));\n        let c2 = a3.mul(b1).sub(a1.mul(b3));\n        let c3 = a1.mul(b2).sub(a2.mul(b1));\n        return tf.concat([c1, c2, c3], 1);\n    }\n\tlet epsilon;\n    let n = num_sphere_pts;\n    if (n >= 600000) {\n        epsilon = 214;\n    } else if (n>= 400000) {\n        epsilon = 75;\n    } else if (n>= 11000) {\n        epsilon = 27;\n    } else if (n>= 890) {\n        epsilon = 10;\n    } else if (n>= 177) {\n        epsilon = 3.33;\n    } else if (n>= 24) {\n        epsilon = 1.33;\n    } else {\n        epsilon = 0.33;\n    }\n\n    const goldenRatio = 1.618033988749895; // (1 + 5**0.5)/2;\n    const i = tf.range(0, n);\n    const theta = i.mul(2 * Math.PI / goldenRatio);\n    const phi = tf.acos( i.add(epsilon).mul(-2/(n-1+2*epsilon)).add(1) );\n    const x = tf.cos(theta).mul(tf.sin(phi));\n    const y = tf.sin(theta).mul(tf.sin(phi));\n    const z = tf.cos(phi);\n    const z_vecs = tf.stack([x, y, z], 1)\n\n    const up_vecs = tf.stack([tf.zeros([n]), tf.ones([n]), tf.zeros([n])], 1);\n    const y_vecs = normalize( cross(z_vecs, up_vecs) );\n    const x_vecs = normalize( cross(y_vecs, z_vecs) );\n    let Rz = tf.stack([x_vecs, y_vecs, z_vecs], 2)  // (num_sphere_pts, 3, 3)\n\n    const rads = tf.range(0, num_xy_rots).mul(2*Math.PI/num_xy_rots);\n    let Rxy = tf.stack([\n        tf.stack([tf.cos(rads), tf.sin(rads), tf.zeros([num_xy_rots])], 1),\n        tf.stack([tf.sin(rads).mul(-1), tf.cos(rads), tf.zeros([num_xy_rots])], 1),\n        tf.stack([tf.zeros([num_xy_rots]), tf.zeros([num_xy_rots]), tf.ones([num_xy_rots])], 1),\n    ], 1)\n\n    let num_rots = num_sphere_pts * num_xy_rots;\n    Rxy = Rxy.expandDims(1).tile([1, num_sphere_pts, 1, 1]).reshape([num_rots, 3, 3])\n    Rz = Rz.expandDims(0).tile([num_xy_rots, 1, 1, 1]).reshape([num_rots, 3, 3])\n    const rot_mats = Rz.matMul(Rxy);  // First rotate x-y coord (local), then Rz\n    return rot_mats;\n}\n// grid_rotations_spiral(2, 2).print();\n\nexport {grid_rotations_spiral, random_rotations_avro};","import React, { useEffect, useRef } from 'react';\nimport { detectMobile } from './mobileCheck';\nimport * as THREE from 'three'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\n\n\n// Args: {rot_mat: Array of 9, size: number}\nfunction AxesFromRotation(props) {\n  /* Tranform = [R | -z] */\n  const T = new THREE.Matrix4();\n  const rot_mat = props.rot_mat;\n  T.set(\n    rot_mat[0], rot_mat[1], rot_mat[2], - rot_mat[2],\n    rot_mat[3], rot_mat[4], rot_mat[5], - rot_mat[5],\n    rot_mat[6], rot_mat[7], rot_mat[8], - rot_mat[8],\n    0, 0, 0, 1\n  );\n  /* Has to do decompose() in R3F */\n  let pos = new THREE.Vector3();\n  let quat = new THREE.Quaternion();\n  let scale = new THREE.Vector3();\n  T.decompose(pos, quat, scale);\n  return <axesHelper args={[props.size]}\n    position={[pos.x, pos.y, pos.z]}\n    quaternion={[quat.x, quat.y, quat.z, quat.w]} />\n}\n\n// Args: {rot_mats: Array of Nx9, nums: int, size: number }\n// Output: Array of N AxesHelpers\nfunction BatchAxesFromRotations(props) {\n  const rot_mats = props.rot_mats;\n  const size = props.size;\n  const nums = props.nums;\n  let res = [];\n  for (let i = 0; i < nums; ++i) {\n    res.push(\n      <AxesFromRotation key={i} rot_mat={rot_mats.slice(9*i, 9*i+9)} size={size}/>\n      );\n  }\n  return <>{res}</>;\n}\n\nfunction WireSphere() {\n  const opacity = detectMobile() ? 0.2 : 0.05;\n  return <mesh position={[0, 0, 0]}>\n    <sphereGeometry args={[1, 32, 16]} />\n    <meshStandardMaterial depthTest={false} wireframe={true} transparent={true}\n      color={0xffffff} opacity={opacity}/>\n  </mesh>\n}\n\nfunction MainGroup(props) {\n  const ref = useRef();\n  const rotRef = useRef();\n  const onClick = () => { rotRef.rot = false; }\n  useEffect(() => { rotRef.rot = true; })\n  useFrame((state, delta) => {\n    if (rotRef.rot) { ref.current.rotation.y += 0.5 * delta; }\n  });\n  return <group ref={ref} onClick={onClick}>\n    <WireSphere />\n    <BatchAxesFromRotations rot_mats={props.rot_mats.dataSync()} nums={props.num_rots} size={0.05} />\n  </group>\n}\n\nfunction MainCamera(props) {\n  const defaultRadius = 2.5;\n  const { camera } = useThree();\n  function ang_to_xyz(theta, phi) {\n    let vec = new THREE.Vector3();\n    vec.x = defaultRadius * Math.sin(theta * Math.PI / 360) * Math.cos(phi * Math.PI / 360);\n    vec.y = defaultRadius * Math.sin(phi * Math.PI / 360);\n    vec.z = defaultRadius * Math.cos(theta * Math.PI / 360) * Math.cos(phi * Math.PI / 360);\n    return vec;\n  }\n  useEffect(() => {\n    camera.fov = 75;\n    camera.near = 0.1;\n    camera.far = 1000;\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.lookAt(0, 0, 0);\n    const pos = ang_to_xyz(0, 120);\n    camera.position.set(pos.x, pos.y, pos.z);\n  })\n  return null;\n}\n\nfunction MainCanvas(props) {\n  return (\n    <Canvas >\n      <color args={[0x000000]} attach=\"background\" />\n      <ambientLight />\n\n      <OrbitControls enablePan={false} maxPolarAngle={Math.PI/2} minDistance={0.5} maxDistance={10}/>\n      <MainCamera />\n\n      <MainGroup rot_mats={props.rot_mats} num_rots={props.num_rots}/>\n    </Canvas>\n  );\n}\n\nexport default MainCanvas;","import './App.css';\nimport React from 'react';\nimport { useState } from 'react';\nimport {random_rotations_avro, grid_rotations_spiral} from './algorithms'\nimport MainCanvas from './ThreeApp'\n\nconst AVRO = 'avro', SPIRAL = 'spiral';\nconst defaultMethod = AVRO;\nconst defaultAvro = { num_rots: 100 };\nconst defaultSpiral = { num_sphere_pts: 100, num_xy_rots: 3 }\n\nfunction AvroSettings(props) {\n  const [val, setVal] = useState(defaultAvro.num_rots);\n  const onClick = () => {\n    props.onSettingChange(AVRO, { num_rots: parseInt(val) });\n  }\n  return <>\n    <label htmlFor='num_rots'>Number of Rotations:</label>\n    <input type='text' id='num_rots' value={val}\n      onChange={(e) => setVal(e.target.value)}></input>\n    <button onClick={onClick}>Refresh</button>\n  </>\n}\n\nfunction SpiralSettings(props) {\n  const [sphereVal, setSphereVal] = useState(defaultSpiral.num_sphere_pts);\n  const [xyVal, setXyVal] = useState(defaultSpiral.num_xy_rots);\n  const onClick = () => {\n    props.onSettingChange(SPIRAL,\n      { num_sphere_pts: parseInt(sphereVal), num_xy_rots: parseInt(xyVal) });\n  }\n  return <>\n    <div>\n      <label htmlFor='num_sphere_pts'>Number of Sphere Points:</label>\n      <input type='text' id='num_sphere_pts' value={sphereVal}\n        onChange={(e) => setSphereVal(e.target.value)}></input>\n    </div>\n    <div>\n      <label htmlFor='num_xy_pts'>Number of XY Rotations:</label>\n      <input type='text' id='num_xy_rots' value={xyVal}\n        onChange={(e) => setXyVal(e.target.value)}></input>\n      <button onClick={onClick}>Refresh</button>\n    </div>\n  </>\n}\n\nfunction DetailedSettings(props) {\n  if (props.method === AVRO) {\n    return <AvroSettings onSettingChange={props.onSettingChange} />\n  } else if (props.method === SPIRAL) {\n    return <SpiralSettings onSettingChange={props.onSettingChange} />\n  }\n}\n\nfunction Selections(props) {\n  const [method, setMethod] = useState(defaultMethod);\n  const onChange = (e) => {\n    const new_method = e.target.value;\n    setMethod(new_method)\n    if (new_method === AVRO) { props.onSettingChange(new_method, defaultAvro); }\n    else if (new_method === SPIRAL) { props.onSettingChange(new_method, defaultSpiral); }\n  };\n  return <div style={{ color: 'white', backgroundColor: 'transparent', position: 'absolute', top: '0px' }}>\n    <div>\n      <label htmlFor=\"method-select\">Generation Method:</label>\n      <select id=\"method-select\" onChange={onChange}>\n        <option value={AVRO}>Random-Avro</option>\n        <option value={SPIRAL}>Spiral</option>\n      </select>\n    </div>\n    <DetailedSettings method={method} onSettingChange={props.onSettingChange}/>\n  </div>\n}\n\nfunction Reference() {\n  return <div style={{ color: 'white', backgroundColor: 'transparent', position: 'absolute', bottom: '0px' }}>\n    <p>Is mobile = {navigator.userAgent.mobile}</p>\n    <p>Reference:</p>\n    <ol>\n      <li>J Avro. \"Fast Random Rotation Matrices.\" (1992)</li>\n      <li><a href=\"https://gist.github.com/zhifanzhu/a1d2a108ad6ea81b853a67d2420b01be\">Spiral method.</a></li>\n    </ol>\n  </div>\n}\n\nclass App extends React.Component {\n  state = {\n    rot_mats: random_rotations_avro(defaultAvro.num_rots),\n    num_rots: defaultAvro.num_rots,\n  }\n  onSettingChange(method, settings) {\n    if (method === AVRO) {\n      const rot_mats = random_rotations_avro(settings.num_rots);\n      this.setState({num_rots: settings.num_rots});\n      this.setState({rot_mats: rot_mats});\n    } else if (method === SPIRAL) {\n      const rot_mats = grid_rotations_spiral(\n        settings.num_sphere_pts, settings.num_xy_rots);\n      this.setState({num_rots: settings.num_sphere_pts * settings.num_xy_rots});\n      this.setState({rot_mats: rot_mats});\n    }\n  }\n  render() {\n    return <div style={{ width: window.innerWidth, height: window.innerHeight }}>\n      <MainCanvas rot_mats={this.state.rot_mats} num_rots={this.state.num_rots} />\n      <Selections onSettingChange={this.onSettingChange.bind(this)}/>\n      <Reference />\n    </div>\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}